// CPEG222 - Project 2 Code
// Author: Byron Lambrou, Kathryn Black
// Input: Keypad PMod
// Output:  2xSSD pmods, and 4 onboad LEDs
// There are some questions left for you in the code
#include<p32xxxx.h>
#include<plib.h>

#pragma config FPLLMUL = MUL_20, FPLLIDIV = DIV_2, FPLLODIV = DIV_1, FWDTEN = OFF
#pragma config POSCMOD = HS, FNOSC = PRIPLL, FPBDIV = DIV_2

// 7 Segment Display pmod using the TOP JA & JB jumpers
// Segments
#define SegA_R LATEbits.LATE0
#define SegB_R LATEbits.LATE1
#define SegC_R LATEbits.LATE2
#define SegD_R LATEbits.LATE3
#define SegE_R LATGbits.LATG9
#define SegF_R LATGbits.LATG8
#define SegG_R LATGbits.LATG7
// Display selection. 0 = right, 1 = left (Cathode)
#define DispSel_R LATGbits.LATG6

// 7 Segment Display pmod using the TOP JC and JD jumpers
#define SegA_L LATGbits.LATG12
#define SegB_L LATGbits.LATG13
#define SegC_L LATGbits.LATG14
#define SegD_L LATGbits.LATG15
#define SegE_L LATDbits.LATD7
#define SegF_L LATDbits.LATD1
#define SegG_L LATDbits.LATD9
// Display selection. 0 = right, 1 = left (Cathode)
#define DispSel_L LATCbits.LATC1


//Keypad pmod using the JE input
//Column pins, should be outputs
#define Col4 LATDbits.LATD14
#define Col3 LATDbits.LATD15
#define Col2 LATFbits.LATF2
#define Col1 LATFbits.LATF8
//Row pins, should be inputs
#define Row4 LATDbits.LATD13
#define Row3 LATDbits.LATD3
#define Row2 LATDbits.LATD11
#define Row1 LATCbits.LATC3


//Lookup table for SSD digits
unsigned char SSD_number[]={
0b0111111,	//0
0b0000110,	//1
0b1011011,	//2
0b1001111,	//3
0b1100110,	//4
0b1101101,	//5
0b1111101,	//6
0b0000111,	//7
0b1111111,	//8
0b1101111,	//9
0b0000000,	//clear
};

void displayDigit (unsigned char value, unsigned int left_ssd, unsigned int leftdisp){
//For left=1, display on left SSD, else, on right SSD
	if(left_ssd==1){
		if(leftdisp==1){
			SegA_L = value & 1;
			SegB_L = (value >> 1) & 1;
			SegC_L = (value >> 2) & 1;
			SegD_L = (value >> 3) & 1;
			SegE_L = (value >> 4) & 1;
			SegF_L = (value >> 5) & 1;
			SegG_L = (value >> 6) & 1;
			DispSel_L= 0;
		}
		else{
			SegA_L = value & 1;
			SegB_L = (value >> 1) & 1;
			SegC_L = (value >> 2) & 1;
			SegD_L = (value >> 3) & 1;
			SegE_L = (value >> 4) & 1;
			SegF_L = (value >> 5) & 1;
			SegG_L = (value >> 6) & 1;
			DispSel_L= 1;
		}
		
	}
	else{
		if(leftdisp==1){
			SegA_R = value & 1;
			SegB_R = (value >> 1) & 1;
			SegC_R = (value >> 2) & 1;
			SegD_R = (value >> 3) & 1;
			SegE_R = (value >> 4) & 1;
			SegF_R = (value >> 5) & 1;
			SegG_R = (value >> 6) & 1;
			DispSel_R= 0;
		}
		else{
			SegA_R = value & 1;
			SegB_R = (value >> 1) & 1;
			SegC_R = (value >> 2) & 1;
			SegD_R = (value >> 3) & 1;
			SegE_R = (value >> 4) & 1;
			SegF_R = (value >> 5) & 1;
			SegG_R = (value >> 6) & 1;
			DispSel_R= 1;
		}
		
	}

}

//Calls displayDigit using the SSD_number lookup table to convert the base 10 int input
//into binary input
void showNumber(int digit, unsigned int left_ssd_num, unsigned int leftdisp){
    displayDigit(SSD_number[digit%10], left_ssd_num, leftdisp);
}

void __ISR (_CHANGE_NOTICE_VECTOR, ip11) ChangeNotice_Handler(void)
{
	/* Code required for determining which button was pressed */
	/* Code for required processing */

}

main(){

    //Configure port C to recive input on pin 3
	TRISC = 0x0008;
	//Configure port E to recieve input on pins 7-10
	TRISD = 0x2808;
	//Configure e-f to be outputs
	TRISE = 0;
	TRISF = 0;
	TRISG = 0;

	// initialize C~G to 0
	PORTC = 0x00;	
	PORTD = 0x00;	
	PORTE = 0x00;	
	PORTF = 0x00;	
	PORTG = 0x00;
	Col1=1;
	Col2=1;
	Col3=1;
	Col4=1;
	while(1){
		if(Row1){
			
		}
	}




}